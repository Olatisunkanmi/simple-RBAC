datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String        @id @default(uuid())
  email    String   @unique
  password String 
  name     String?
  AccessToken      AccessToken[]

  posts    Post[]
  comments Comment[]
   roles            Role[]               @relation("user_roles")
  rolePermissions  UserRolePermission[]
}


model AccessToken {
  id           String    @id @default(uuid())
  expiresIn    String    @map("expires_in")
  isUsed       Boolean   @default(false) @map("is_used")
  userId       String    @map("user_id")
  refreshToken String?   @map("refresh_token")
  usedAt       DateTime?
  token        String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("access_token")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  comments  Comment[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String
  postId  Int
  post    Post   @relation(fields: [postId], references: [id])
  authorId String
  author  User   @relation(fields: [authorId], references: [id])
}

model Role {
  id              String               @id @default(uuid())
  name            String               @unique
  description     String?
  userId          String?
  userPermissions UserRolePermission[]
  permissions     Permission[]         @relation("roles_permissions")
  users           User[]               @relation("user_roles")
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@map("roles")
}

model Permission {
  id                  String               @id @default(uuid())
  action              String
  resource            String
  conditions          Json?
  roles               Role[]               @relation("roles_permissions")
  userRolePermissions UserRolePermission[] @relation("UserRolePermissions")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@unique([action, resource])
  @@map("permissions")
}

model UserRolePermission {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  role        Role         @relation(fields: [roleId], references: [id])
  roleId      String
  permissions Permission[] @relation("UserRolePermissions")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([userId, roleId])
}

enum TokenType {
  AUTH @map("auth")
  OTP  @map("otp")

  @@map("token_type")
}