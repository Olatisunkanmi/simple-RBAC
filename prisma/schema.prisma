datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  fullName       String
  password       String
  phoneNumber    String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String?

  roles        UserRole[]
  organization Organization? @relation(fields: [organizationId], references: [id])
  AccessToken  AccessToken[]
  Post         Post[]
  Comment      Comment[]

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  permissions    Permission[]
  users          UserRole[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@map("roles")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id          String   @id @default(cuid())
  action      String // create, read, update, delete, manage
  resource    String // User, Profile, etc.
  conditions  Json? // Store conditions as JSON
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  role   Role              @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String
  fields PermissionField[]

  @@unique([roleId, action, resource])
  @@map("permissions")
}

model PermissionField {
  id          String   @id @default(cuid())
  name        String // Field name
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  @@unique([permissionId, name])
  @@map("permission_fields")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users User[]
  roles Role[]

  @@map("organizations")
}

model AccessToken {
  id           String    @id @default(uuid())
  expiresIn    String    @map("expires_in")
  isUsed       Boolean   @default(false) @map("is_used")
  userId       String    @map("user_id")
  refreshToken String?   @map("refresh_token")
  usedAt       DateTime?
  token        String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("access_token")
}

model Post {
  id       Int       @id @default(autoincrement())
  title    String
  content  String?
  authorId String
  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]
}

model Comment {
  id       Int    @id @default(autoincrement())
  content  String
  postId   Int
  post     Post   @relation(fields: [postId], references: [id])
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}
